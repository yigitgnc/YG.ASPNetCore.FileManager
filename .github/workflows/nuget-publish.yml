name: Publish NuGet and GitHub Package

on:
  push:
    branches:
      - nuget

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Get Current Version
        id: get_current_version
        run: |
          CURRENT_VERSION=$(grep -oP '(?<=<Version>).*?(?=</Version>)' src/YG.ASPNetCore.FileManager/YG.ASPNetCore.FileManager.csproj)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Fetch Remote Tags
        run: git fetch --tags

      - name: Increment Version Until Tag Is Unique
        id: increment_version
        run: |
          CURRENT_VERSION=${{ env.CURRENT_VERSION }}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          while true; do
            # Check if the tag exists remotely
            REMOTE_TAG_EXISTS=$(git ls-remote --tags origin | grep -w "refs/tags/$MAJOR.$MINOR.$PATCH" || true)
            
            if [ -z "$REMOTE_TAG_EXISTS" ]; then
              # If the tag doesn't exist, finalize the version
              FINAL_VERSION="$MAJOR.$MINOR.$PATCH"
              break
            else
              # Increment the patch version
              PATCH=$((PATCH + 1))
            fi
          done
          
          # Update the version in the .csproj file
          sed -i "s|<Version>${{ env.CURRENT_VERSION }}</Version>|<Version>$FINAL_VERSION</Version>|" src/YG.ASPNetCore.FileManager/YG.ASPNetCore.FileManager.csproj
          echo "FINAL_VERSION=$FINAL_VERSION" >> $GITHUB_ENV

      - name: Commit Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit changes if the version has been updated
          if [ -n "$(git status --porcelain)" ]; then
            git commit -am "Prepare release ${{ env.FINAL_VERSION }}"
          fi

      - name: Create and Push Tag
        run: |
          git tag "${{ env.FINAL_VERSION }}"
          git push origin "${{ env.FINAL_VERSION }}"

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Pack
        run: dotnet pack --configuration Release --output ./output

      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: dotnet nuget push ./output/*.nupkg -s https://api.nuget.org/v3/index.json -k $NUGET_API_KEY

      - name: Publish to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: dotnet nuget push ./output/*.nupkg -s "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" -k $GITHUB_TOKEN
