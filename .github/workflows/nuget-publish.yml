name: Publish NuGet and GitHub Package

on:
  push:
    branches:
      - nuget

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Get Current Version
        id: get_current_version
        run: |
          CURRENT_VERSION=$(grep -oP '(?<=<Version>).*?(?=</Version>)' src/YG.ASPNetCore.FileManager/YG.ASPNetCore.FileManager.csproj)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Check for Existing Tag
        id: check_tags
        run: |
          TAG_EXISTS=$(git tag --list "${{ env.CURRENT_VERSION }}" | wc -l)
          echo "TAG_EXISTS=$TAG_EXISTS" >> $GITHUB_ENV

      - name: Increment Version
        id: increment_version
        if: env.TAG_EXISTS == '0'
        run: |
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ env.CURRENT_VERSION }}"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          sed -i "s|<Version>${{ env.CURRENT_VERSION }}</Version>|<Version>$NEW_VERSION</Version>|" src/YG.ASPNetCore.FileManager/YG.ASPNetCore.FileManager.csproj
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Skip Version Increment (Tag Already Exists)
        if: env.TAG_EXISTS != '0'
        run: echo "Tag for version ${{ env.CURRENT_VERSION }} already exists. Skipping version increment."

      - name: Create New Git Tag
        if: env.TAG_EXISTS == '0'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -am "Bump version to ${{ env.NEW_VERSION }}"
          git tag "${{ env.NEW_VERSION }}"
          git push origin "${{ env.NEW_VERSION }}"
          git push

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Pack
        run: dotnet pack --configuration Release --output ./output

      # Publish to NuGet.org
      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: dotnet nuget push ./output/*.nupkg -s https://api.nuget.org/v3/index.json -k $NUGET_API_KEY

      # Publish to GitHub Packages
      - name: Publish to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: dotnet nuget push ./output/*.nupkg -s "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" -k $GITHUB_TOKEN
