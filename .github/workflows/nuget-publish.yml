name: Publish NuGet and GitHub Package

on:
  push:
    branches:
      - nuget

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Determine Next Version
        id: determine_version
        run: |
          # Fetch the current version from the .csproj file
          CURRENT_VERSION=$(grep -oP '(?<=<Version>).*?(?=</Version>)' src/YG.ASPNetCore.FileManager/YG.ASPNetCore.FileManager.csproj)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Fetch all tags from the remote repository
          git fetch --tags

          # Determine the next available version
          NEW_VERSION="$CURRENT_VERSION"
          while git tag --list "$NEW_VERSION" > /dev/null; do
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          done

          # Output the new version
          echo "New Version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update Version in .csproj
        run: |
          # Replace the <Version> tag in the .csproj file with the new version
          sed -i "s|<Version>.*</Version>|<Version>${{ env.NEW_VERSION }}</Version>|" src/YG.ASPNetCore.FileManager/YG.ASPNetCore.FileManager.csproj

          # Stage the change for committing
          git add src/YG.ASPNetCore.FileManager/YG.ASPNetCore.FileManager.csproj

      - name: Commit and Create Tag
        run: |
          # Configure Git user
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit the version update
          git commit -m "Bump version to ${{ env.NEW_VERSION }}"

          # Create and push the new tag
          git tag "${{ env.NEW_VERSION }}"
          git push origin "${{ env.NEW_VERSION }}"
          git push

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Pack
        run: dotnet pack --configuration Release --output ./output

      # Publish to NuGet.org
      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: dotnet nuget push ./output/*.nupkg -s https://api.nuget.org/v3/index.json -k $NUGET_API_KEY

      # Publish to GitHub Packages
      - name: Publish to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: dotnet nuget push ./output/*.nupkg -s "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" -k $GITHUB_TOKEN
